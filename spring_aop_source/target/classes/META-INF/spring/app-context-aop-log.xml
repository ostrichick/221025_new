<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<description>스프링 AOP 관련 설정</description>
	
	<!-- AOP의 대상클래스(Target Object): TargetA 빈 등록 -->
	<bean id="targetA" class="ezen.aop.log.xml.TargetA"/>
	
	<!-- Aspect(공통기능)과 적용시점들(Advice)를 가지고 있는 Advisor클래스 빈 등록 -->
	<bean id="logAdvisor" class="ezen.aop.log.xml.LogAdvisor"/>
	
	<!-- AOP를 적용하기 위한 설정 -->
	<aop:config proxy-target-class="true"> <!-- 동적 프록시 객체 적용 -->
		<!-- 공통기능을 적용할 메소드 지정 -->
		<aop:pointcut id="pointcutLogAspect" 
		    expression="execution(* ezen.aop..TargetA.method*())" />
		<!-- 공통기능 지정 -->
		<aop:aspect ref="logAdvisor">
			<!-- 공통기능을 언제 적용할지 지정 -->
			<!-- <aop:before method="logBefore" pointcut-ref="pointcutLogAspect"/>
			     <aop:after method="logAfter" pointcut-ref="pointcutLogAspect"/> 
			     <aop:after-returning method="logAfterReturning" pointcut-ref="pointcutLogAspect"/> 
			     <aop:after-throwing method="logAfterThrowing" pointcut-ref="pointcutLogAspect" throwing="e"/> -->       
			<aop:around method="logAround" pointcut-ref="pointcutLogAspect"/> 
		</aop:aspect>    
	</aop:config>
	
	

</beans>
