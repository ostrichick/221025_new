  Day 1
객체지향 프로그램 특성 상속성, 다형성, 캡슐화

객체(현실객체) -> 객체모델링, 추상화 -> SW객체

속성                 ->               변수 (클래스: 객체생성을 위한 틀, 설계도, 프레임)
동작행위              ->              메소드

프로그램 생성주기 Software development life cycle
요구사항 분석 - 요구사랑 정의 명세
설계
구현
테스트 및 배포
유지보수

  클래스 - 객체 생성을 위한 설계도
  -멤버변수 : 스태틱/정적/클래스변수 - JVM 내 메쏘드 영역 - 하나만 존재 - 가장 오래 메모리에 존재
            vs 인스턴스 멤버변수 - JVM내 힙 영역 - 객체별로 존재
    1. 접근지정자(제한자) : private, protected, (default), public
    2. 수정자 : static, final, transient
    3. 데이터형 
      - 기본(primitive) - byte short int long double float boolean char
      - 참조(reference) - 배열 클래스 인터페이스 enum
    4. 변수이름 - 식별자 identifier
  -생성자
  -메소드

  객체 - 일반적인 의미 - 실제세계에 존재하는 모든것
      - 클래스를 통해서 JVM의 메모리상(힙영역)에 만들어진 실체, 인스턴스 

  Day 2
Getter, Setter - 은닉화, 캡슐화. 메소드를 통해 잘못된 값이 들어가는것을 미리 방지할 수 있음

메소드 - 다른 프로그래밍 언어에서의 함수
     1. 접근지정자 : private, protected, (default), public
     2. 수정자 : static, final, abstract, 
      - 스태틱메소드 - 클래스이름.메소드() 호출 가능.
      - 인스턴스 메소드

     3. 반환형 - 메소드 실행 결과값에 대한 반환 데이터형 return datatype
              - void : 반환값이 없는 메소드 (return은 보통 생략함)
     4. 메소드이름
     5. (매개변수 데이터형 매개변수 명) parameter
     6. {처리문}

메소드 구분 기호 (signature)
  - 메소드 이름
  - 매개변수 (데이터형, 개수, 순서) - 오버로딩을 통해 다형성
    
    